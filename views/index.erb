<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>running</title>
  <script src="/assets/js/Chart.min.js"></script>
  <link rel="stylesheet" href="/assets/css/bootstrap.min.css">
  <link rel="stylesheet" href="/style.css">
</head>
<body>
<div id="container">
  <div id="inner">
<img class="title" src="/image/bar.png">
 <form action="/create" method="post">
   <label for="title">競技</label>
   <input type="text" name="title" id="title">
    <label for="title">時間(分）</label>
   <input type="text" name="price" id="price">
   <select name="category" id="category">
    <% @categories.each do |category| %>
      <option value="<%= category.id %>"><%=category.name %></option>
      <% end %>
    </select>
   <input class="btn2" type="submit" value="追加"> 
   </form>
   <ul class="menu clearfix list-unstyled">
   <% @categories.each do |category| %>
   <li class="pull-left"><a href="/category/<%= category.id %>"><%= category.name %></a></li>
   <% end %>
   </ul>

   <% if @category.present? %>
     <h1 class="pull-left"><%= @category.name %></h1>
     <% end %>   
   <div>
   <% @items.each do |item| %>
   <div>
   <p><%= item.title %></p>
   <p><%= item.price %>分</p>
   <p><%= item.category.name %></p>
   <p><a href="/edit/<%= item.id %>"><img src="/image/edit.png"></a></p>
   <form action="/<%= item.id %>" method="post">
    <input type="hidden" name='_method' value='delete'>
    <input class="btn" type="submit" value="削除">
  </form>

<% end %>
    
  </div>
</div>
 <canvas id="graph" height="500" width"500"></canvas>
 <script>
colors = ['#F44336','#448AFF','#FF9800','#009688','#E91E63','#00BCD4']
var doughnutData = [
<% @categories.each_with_index do |category, idx| %>
{
  value: <%= category.items.sum(:price) %>,
  label: '<%= category.name %>',
  color: colors[<%= idx %>]
},
<% end %>
];
var myDoughnut= new Chart(document.getElementById("graph").
  getContext("2d")).Doughnut(doughnutData);
  </script>
<a href="https://twitter.com/share" class="twitter-share-button" data-text="私はこれだけ運動しました！あなたも運動してみませんか？ <%= request.fullpath %>" data-via="Life_is_Tech" data-lang="ja" data-count="none" data-hashtags="sportReport">ツイート</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
<script src="/three/build/three.min.js"></script>
    <script src="/three/js/libs/stats.min.js"></script>
 
  
</div>
 

    <script>

      var container, stats;

      var camera, scene, renderer;

      var geometry, group;

      var mouseX = 0, mouseY = 0;

      var windowHalfX = window.innerWidth / 2;
      var windowHalfY = window.innerHeight / 2;

      document.addEventListener( 'mousemove', onDocumentMouseMove, false );

      init();
      animate();

      function init() {

        container = document.createElement( 'div' );
        container.className = "back";
        document.body.appendChild( container );

        camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 10000 );
        camera.position.z = 500;

        scene = new THREE.Scene();
        scene.fog = new THREE.Fog( 0xffffff, 1, 10000 );

        var geometry = new THREE.BoxGeometry( 100, 100, 100 );
        var material = new THREE.MeshNormalMaterial();

        group = new THREE.Group();

        for ( var i = 0; i < 1000; i ++ ) {

          var mesh = new THREE.Mesh( geometry, material );
          mesh.position.x = Math.random() * 2000 - 1000;
          mesh.position.y = Math.random() * 2000 - 1000;
          mesh.position.z = Math.random() * 2000 - 1000;

          mesh.rotation.x = Math.random() * 2 * Math.PI;
          mesh.rotation.y = Math.random() * 2 * Math.PI;

          mesh.matrixAutoUpdate = false;
          mesh.updateMatrix();

          group.add( mesh );

        }

        scene.add( group );

        renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(  0xFFF0F5 );
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( window.innerWidth, window.innerHeight );
        renderer.sortObjects = false;

        container.appendChild( renderer.domElement );

      //

      window.addEventListener( 'resize', onWindowResize, false );

      }

      function onWindowResize() {

        windowHalfX = window.innerWidth / 2;
        windowHalfY = window.innerHeight / 2;

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

      }

      function onDocumentMouseMove(event) {

        mouseX = ( event.clientX - windowHalfX ) * 10;
        mouseY = ( event.clientY - windowHalfY ) * 10;

      }

      //

      function animate() {

        requestAnimationFrame( animate );

        render();
        stats.update();

      }

      function render() {

        var time = Date.now() * 0.001;

        var rx = Math.sin( time * 0.7 ) * 0.5,
          ry = Math.sin( time * 0.3 ) * 0.5,
          rz = Math.sin( time * 0.2 ) * 0.5;

        camera.position.x += ( mouseX - camera.position.x ) * .05;
        camera.position.y += ( - mouseY - camera.position.y ) * .05;

        camera.lookAt( scene.position );

        group.rotation.x = rx;
        group.rotation.y = ry;
        group.rotation.z = rz;

        renderer.render( scene, camera );

      }

    </script>

</body>
</html>
